fs            = require('fs')
{spawnSync, execSync, spawn} = require('child_process')
gulpRun = require('gulp-run')  # !TODO: Switch away from spawnSync to gulp-run. For now only compile uses it.

runSync = (command, options, next) ->
  {stderr, stdout} = runSyncRaw(command, options)
  if stderr?.length > 0
    console.error("Error running `#{command}`\n" + stderr)
    process.exit(1)
  if next?
    next(stdout)
  else
    if stdout?.length > 0
      console.log("Stdout running command '#{command}'...\n" + stdout)

runSyncNoExit = (command, options = []) ->
  {stderr, stdout} = runSyncRaw(command, options)
  console.log("Output of running '#{command + ' ' + options.join(' ')}'...\n#{stderr}\n#{stdout}\n")
  return {stderr, stdout}

runSyncRaw = (command, options) ->
  output = execSync(command, options)
  stdout = output.stdout?.toString()
  stderr = output.stderr?.toString()
  return {stderr, stdout}


run = (command, options, next) ->
  {stderr, stdout} = runSyncRaw(command, options)
  if stderr?.length > 0
    console.error("Error running `#{command}`\n" + stderr)
    process.exit(1)
  if next?
    next(stdout)
  else
    if stdout?.length > 0
      console.log("Stdout running command '#{command}'...\n" + stdout)

runNoExit = (command, options = []) ->
  {stderr, stdout} = runSyncRaw(command, options)
  console.log("Output of running '#{command + ' ' + options.join(' ')}'...\n#{stderr}\n#{stdout}\n")
  return {stderr, stdout}

runRaw = (command, options) ->
  output = spawn(command, options, () ->
    stdout = output.stdout?.toString()
    stderr = output.stderr?.toString()
    return {stderr, stdout}
  )


task('compile', 'Compile CoffeeScript source files to JavaScript', () ->
  process.chdir(__dirname)
  fs.readdir('./', (err, contents) ->
    files = ("#{file}" for file in contents when (file.indexOf('.coffee') > 0))
    command = ['coffee ', '-c'].concat(files).join(' ')
    gulpRun(command).exec()
  )
)

task('test', 'Run the CoffeeScript test suite with nodeunit', () ->
  {reporters} = require('nodeunit')
  process.chdir(__dirname)
  reporters.default.run(['test'], undefined, (failure) -> 
    if failure?
      console.log(failure)
      process.exit(1)
  )
)


task('publish', 'Publish to npm and add git tags', () ->
  process.chdir(__dirname)
  runSync('cake test')  # Doing this externally to make it synchronous
  process.chdir(__dirname)
  runSync('cake compile')
  console.log('checking git status --porcelain')
  runSync('git status --porcelain', [], (stdout) ->
#    if stdout.length == 0
    unless stdout?

      console.log('checking origin/master')
      {stderr, stdout} = runSyncNoExit('git rev-parse origin/master')

      console.log('checking master')
      stdoutOrigin = stdout
      {stderr, stdout} = runSyncNoExit('git rev-parse master')
      stdoutMaster = stdout

      if stdoutOrigin == stdoutMaster

        console.log('running npm publish')
        runSyncNoExit('npm publish .')

        if fs.existsSync('npm-debug.log')
          console.error('`npm publish` failed. See npm-debug.log for details.')
        else

          console.log('creating git tag')
          runSyncNoExit("git tag v#{require('./package.json').version}")
          runSyncNoExit("git push --tags")
      else
        console.error('Origin and master out of sync. Not publishing.')
    else
      console.error('`git status --porcelain` was not clean. Not publishing.')
  )
)

task('publish2', 'Publish to npm and add git tags', () ->
  process.chdir(__dirname)
  gulpRun('cake test').exec((err, results) ->
    console.log(results)
    process.exit(0)
    process.chdir(__dirname)
    runSync('cake compile')
    console.log('checking git status --porcelain')
    runSync('git status --porcelain', [], (stdout) ->
  #    if stdout.length == 0
      unless stdout?

        console.log('checking origin/master')
        {stderr, stdout} = runSyncNoExit('git rev-parse origin/master')

        console.log('checking master')
        stdoutOrigin = stdout
        {stderr, stdout} = runSyncNoExit('git rev-parse master')
        stdoutMaster = stdout

        if stdoutOrigin == stdoutMaster

          console.log('running npm publish')
          runSyncNoExit('npm publish .')

          if fs.existsSync('npm-debug.log')
            console.error('`npm publish` failed. See npm-debug.log for details.')
          else

            console.log('creating git tag')
            runSyncNoExit("git tag v#{require('./package.json').version}")
            runSyncNoExit("git push --tags")
        else
          console.error('Origin and master out of sync. Not publishing.')
      else
        console.error('`git status --porcelain` was not clean. Not publishing.')
    )
  )
)

